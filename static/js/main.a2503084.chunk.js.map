{"version":3,"sources":["img/coruscant.png","components/Model.js","components/CategoryButton.js","components/Coruscant.js","components/Planet.js","App.js","reportWebVitals.js","index.js"],"names":["Model","Camera","props","ref","useRef","set","useThree","state","useEffect","camera","current","useFrame","updateMatrixWorld","Asset","url","gltf","useLoader","GLTFLoader","object","scene","CameraControls","domElement","gl","controls","update","args","autoRotate","autoRotateSpeed","id","position","fallback","intensity","Category1Button","buttn","document","getElementById","buttn2","buttn3","classList","add","remove","Category2Button","Category3Button","extend","OrbitControls","Coruscant","className","title","href","onclick","Planet","App","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a2503084.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/coruscant.f3e6092b.png\";","import React, { useRef, Suspense, useEffect } from \"react\";\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\r\nimport { Canvas, useLoader, useFrame, extend, useThree } from '@react-three/fiber'\r\n\r\nextend ({ OrbitControls });\r\n\r\nexport default function Model() {\r\n\r\n  function Camera(props) {\r\n    const ref = useRef()\r\n    const set = useThree(state => state.set)\r\n    // Make the camera known to the system\r\n    // eslint-disable-next-line\r\n    useEffect(() => void set({ camera: ref.current }), [])\r\n    // Update it every frame\r\n    useFrame(() => ref.current.updateMatrixWorld())\r\n    return <perspectiveCamera ref={ref} {...props} />\r\n  }\r\n\r\n  function Asset({ url }) {\r\n    const gltf = useLoader(GLTFLoader, url)\r\n    return <primitive object={gltf.scene} />\r\n  }\r\n\r\n  const CameraControls = () => {\r\n    // Get a reference to the Three.js Camera, and the canvas html element.\r\n    // We need these to setup the OrbitControls component.\r\n    // https://threejs.org/docs/#examples/en/controls/OrbitControls\r\n    const {\r\n      camera,\r\n      gl: { domElement },\r\n    } = useThree();\r\n    // Ref to the controls, so that we can update them on every frame using useFrame\r\n    const controls = useRef();\r\n    useFrame((state) => controls.current.update());\r\n    return <orbitControls \r\n    ref={controls} \r\n    args={[camera, domElement]}\r\n    autoRotate={true}\r\n    autoRotateSpeed={1}\r\n     />;\r\n  };\r\n\r\n  const Loading = () => {\r\n    return <p>\r\n      Loading...\r\n    </p>\r\n  }\r\n\r\n  return (\r\n    <div id=\"canvas\">\r\n    <Canvas>\r\n      <CameraControls />\r\n      <Camera position={[0, 10, 24]} />\r\n      <Suspense fallback={Loading}>\r\n        <Asset url=\"models/coruscant.glb\" />\r\n      </Suspense>\r\n      <directionalLight intensity={0.1} />\r\n      <ambientLight intensity={1} />\r\n    </Canvas>\r\n    </div>\r\n  );\r\n};\r\n","import react from \"react\"\r\n\r\nexport function Category1Button() {\r\n    let buttn = document.getElementById(\"category1\")\r\n    let buttn2 = document.getElementById(\"category2\")\r\n    let buttn3 = document.getElementById(\"category3\")\r\n\r\n    buttn.classList.add(\"categoryButtonPressed\")\r\n    buttn2.classList.remove(\"categoryButtonPressed\")\r\n    buttn3.classList.remove(\"categoryButtonPressed\")\r\n}\r\nexport function Category2Button() {\r\n    let buttn = document.getElementById(\"category1\")\r\n    let buttn2 = document.getElementById(\"category2\")\r\n    let buttn3 = document.getElementById(\"category3\")\r\n\r\n    buttn2.classList.add(\"categoryButtonPressed\")\r\n    buttn.classList.remove(\"categoryButtonPressed\")\r\n    buttn3.classList.remove(\"categoryButtonPressed\")\r\n}\r\nexport function Category3Button() {\r\n    let buttn = document.getElementById(\"category1\")\r\n    let buttn2 = document.getElementById(\"category2\")\r\n    let buttn3 = document.getElementById(\"category3\")\r\n    \r\n    buttn3.classList.add(\"categoryButtonPressed\")\r\n    buttn2.classList.remove(\"categoryButtonPressed\")\r\n    buttn.classList.remove(\"categoryButtonPressed\")\r\n}","import coruscantImg from \"../img/coruscant.png\"\r\nimport Model from \"./Model\"\r\nimport {Category1Button, Category2Button, Category3Button} from \"./CategoryButton\"\r\n\r\nfunction Coruscant() {\r\n    return(\r\n        <div className=\"container\">\r\n            <div id=\"topContainer\">\r\n                {/* <img class=\"planetImg\" src={coruscantImg}/> */}\r\n                <Model/>\r\n                <div id=\"textDiv\">\r\n                    <h1>CORUSCANT</h1>\r\n                    <p className=\"planetinfo\">Also known as Imperial Center during the rule of the Galactic Empire, was an <abbr title=\"a city-covered planet\">ecumenopolis</abbr>, collectively known as Imperial City in the Coruscant system of the Core Worlds. Though debated by historians, it was generally believed that Coruscant was the original homeworld of humanity.</p>\r\n                    <p id=\"planetlink\">link <a href=\"#\">wikipedia</a></p>\r\n                    <div id=\"butns\">\r\n                        <a id=\"category1\" className=\"categoryButton categoryButtonPressed\" href=\"\" onclick={Category1Button}>01 Overview</a>\r\n                        <a id=\"category2\" className=\"categoryButton\" href=\"\" onclick={Category2Button}>02 </a>\r\n                        <a id=\"category3\" className=\"categoryButton\" href=\"\" onclick={Category3Button}>03</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div id=\"bottomContainer\">\r\n                <div className=\"bottomText\">\r\n                    <h2>Moons</h2>\r\n                    <p>4</p>  \r\n                </div>\r\n                <div className=\"bottomText\">\r\n                    <h2>Population</h2>\r\n                    <p>3.000.000.000.000~</p>\r\n                </div>\r\n                <div className=\"bottomText\">\r\n                    <h2>Radius</h2>\r\n                    <p>6120km</p>\r\n                </div>\r\n                <div className=\"bottomText\">\r\n                    <h2>Temperature</h2>\r\n                    <p>-49° to 59°C</p>\r\n                </div>\r\n            </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Coruscant","import Coruscant from \"./Coruscant.js\"\r\n\r\nfunction Planet() {\r\n    return(\r\n        <Coruscant/>\r\n    )\r\n}\r\n\r\nexport default Planet","import Planet from \"./components/Planet\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav>\n        <h2 id=\"navName\">planets</h2>\n        <div id=\"navDiv\">\n          <a class=\"navButtons\" href=\"#\">Coruscant</a>\n          <a class=\"navButtons\" href=\"#\">Hoth</a>\n          <a class=\"navButtons\" href=\"#\">Tatooine</a>\n          <a class=\"navButtons\" href=\"#\">Naboo</a>\n          <a class=\"navButtons\" href=\"#\">Kamino</a>\n          <a class=\"navButtons\" href=\"#\">Alderaan</a>\n          <a class=\"navButtons\" href=\"#\">Mustafar</a>\n          <a class=\"navButtons\" href=\"#\">Geonosis</a>\n        </div>\n      </nav>\n      <Planet/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}